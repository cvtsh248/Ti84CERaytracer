	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_invSqrt
_invSqrt:
	ld	hl, -4
	call	__frameset
	ld	iy, (ix + 6)
	ld	d, (ix + 9)
	or	a, a
	sbc	hl, hl
	ld	e, 63
	lea	bc, iy + 0
	ld	a, d
	call	__fmul
	ld	(ix + -3), bc
	ld	(ix + -4), a
	inc	l
	lea	bc, iy + 0
	ld	a, d
	call	__lshrs
	ld	hl, 3627487
	ld	e, 95
	call	__lsub
	push	hl
	pop	iy
	ld	d, e
	ld	bc, (ix + -3)
	ld	a, (ix + -4)
	call	__fmul
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	ld	bc, -4194304
	ld	a, 63
	call	__fsub
	lea	hl, iy + 0
	ld	e, d
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vecAdd
_vecAdd:
	call	__frameset0
	ld	de, (ix + 6)
	ld	hl, 12
	push	hl
	pea	ix + 9
	push	de
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix + 21)
	ld	a, (ix + 24)
	ld	hl, (ix + 6)
	ld	hl, (hl)
	ld	iy, (ix + 6)
	lea	iy, iy + 3
	ld	e, (iy)
	call	__fadd
	ld	iy, (ix + 6)
	ld	(iy), bc
	ld	(iy + 3), a
	ld	bc, (ix + 25)
	ld	a, (ix + 28)
	lea	de, iy + 4
	ld	hl, (iy + 4)
	push	de
	pop	iy
	lea	iy, iy + 3
	ld	e, (iy)
	call	__fadd
	ld	iy, (ix + 6)
	ld	(iy + 4), bc
	ld	(iy + 7), a
	ld	bc, (ix + 29)
	ld	a, (ix + 32)
	lea	de, iy + 8
	ld	hl, (iy + 8)
	push	de
	pop	iy
	lea	iy, iy + 3
	ld	e, (iy)
	call	__fadd
	ld	iy, (ix + 6)
	ld	(iy + 8), bc
	ld	(iy + 11), a
	lea	hl, iy + 0
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vecSub
_vecSub:
	ld	hl, -1
	call	__frameset
	ld	de, (ix + 6)
	ld	hl, 12
	push	hl
	pea	ix + 9
	push	de
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 21)
	ld	e, (ix + 24)
	ld	iy, (ix + 6)
	ld	bc, (iy)
	ld	iy, (ix + 6)
	lea	iy, iy + 3
	ld	a, (iy)
	call	__fsub
	ld	iy, (ix + 6)
	ld	(iy), bc
	ld	(iy + 3), a
	ld	hl, (ix + 25)
	ld	a, (ix + 28)
	ld	(ix + -1), a
	lea	de, iy + 4
	ld	bc, (iy + 4)
	push	de
	pop	iy
	lea	iy, iy + 3
	ld	a, (iy)
	ld	e, (ix + -1)
	call	__fsub
	ld	iy, (ix + 6)
	ld	(iy + 4), bc
	ld	(iy + 7), a
	ld	hl, (ix + 29)
	ld	a, (ix + 32)
	ld	(ix + -1), a
	lea	de, iy + 8
	ld	bc, (iy + 8)
	push	de
	pop	iy
	lea	iy, iy + 3
	ld	a, (iy)
	ld	e, (ix + -1)
	call	__fsub
	ld	iy, (ix + 6)
	ld	(iy + 8), bc
	ld	(iy + 11), a
	lea	hl, iy + 0
	inc	sp
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vecScalarMul
_vecScalarMul:
	call	__frameset0
	ld	de, (ix + 6)
	ld	hl, 12
	push	hl
	pea	ix + 9
	push	de
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	bc, (iy)
	lea	hl, iy + 3
	ld	a, (hl)
	ld	hl, (ix + 21)
	ld	e, (ix + 24)
	call	__fmul
	ld	(iy), bc
	ld	(iy + 3), a
	lea	hl, iy + 4
	ld	bc, (iy + 4)
	push	hl
	pop	iy
	lea	hl, iy + 3
	ld	a, (hl)
	ld	hl, (ix + 21)
	ld	e, (ix + 24)
	call	__fmul
	ld	iy, (ix + 6)
	ld	(iy + 4), bc
	ld	(iy + 7), a
	lea	hl, iy + 8
	ld	bc, (iy + 8)
	push	hl
	pop	iy
	lea	hl, iy + 3
	ld	a, (hl)
	ld	hl, (ix + 21)
	ld	e, (ix + 24)
	call	__fmul
	ld	iy, (ix + 6)
	ld	(iy + 8), bc
	ld	(iy + 11), a
	lea	hl, iy + 0
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vecScalarDiv
_vecScalarDiv:
	call	__frameset0
	ld	de, (ix + 6)
	ld	hl, 12
	push	hl
	pea	ix + 9
	push	de
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	bc, (iy)
	lea	hl, iy + 3
	ld	a, (hl)
	ld	hl, (ix + 21)
	ld	e, (ix + 24)
	call	__fdiv
	ld	(iy), bc
	ld	(iy + 3), a
	lea	hl, iy + 4
	ld	bc, (iy + 4)
	push	hl
	pop	iy
	lea	hl, iy + 3
	ld	a, (hl)
	ld	hl, (ix + 21)
	ld	e, (ix + 24)
	call	__fdiv
	ld	iy, (ix + 6)
	ld	(iy + 4), bc
	ld	(iy + 7), a
	lea	hl, iy + 8
	ld	bc, (iy + 8)
	push	hl
	pop	iy
	lea	hl, iy + 3
	ld	a, (hl)
	ld	hl, (ix + 21)
	ld	e, (ix + 24)
	call	__fdiv
	ld	iy, (ix + 6)
	ld	(iy + 8), bc
	ld	(iy + 11), a
	lea	hl, iy + 0
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vecCrossProdut
_vecCrossProdut:
	ld	hl, -19
	call	__frameset
	ld	iy, (ix + 6)
	ld	bc, (ix + 13)
	ld	(ix + -4), bc
	ld	a, (ix + 16)
	ld	(ix + -1), a
	ld	hl, (ix + 29)
	ld	(ix + -12), hl
	ld	e, (ix + 32)
	ld	(ix + -9), e
	call	__fmul
	ld	(ix + -15), bc
	ld	(ix + -19), a
	ld	bc, (ix + 17)
	ld	(ix + -18), bc
	ld	d, (ix + 20)
	ld	hl, (ix + 25)
	ld	(ix + -8), hl
	ld	e, (ix + 28)
	ld	(ix + -5), e
	ld	a, d
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix + -15)
	ld	a, (ix + -19)
	call	__fsub
	ld	(iy), bc
	ld	(iy + 3), a
	ld	hl, (ix + 21)
	ld	e, (ix + 24)
	ld	(ix + -15), e
	ld	bc, (ix + -18)
	ld	a, d
	call	__fmul
	push	bc
	pop	iy
	ld	(ix + -18), a
	ld	hl, (ix + 9)
	ld	d, (ix + 12)
	ld	bc, (ix + -12)
	ld	a, (ix + -9)
	ld	e, d
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	lea	bc, iy + 0
	ld	a, (ix + -18)
	call	__fsub
	ld	iy, (ix + 6)
	ld	(iy + 4), bc
	ld	(iy + 7), a
	ld	bc, (ix + -8)
	ld	a, (ix + -5)
	ld	hl, (ix + 9)
	ld	e, d
	call	__fmul
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix + -4)
	ld	a, (ix + -1)
	ld	hl, (ix + 21)
	ld	e, (ix + -15)
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	lea	bc, iy + 0
	ld	a, d
	call	__fsub
	ld	iy, (ix + 6)
	ld	(iy + 8), bc
	ld	(iy + 11), a
	lea	hl, iy + 0
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_dotProduct
_dotProduct:
	call	__frameset0
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	ld	hl, (ix + 18)
	ld	e, (ix + 21)
	call	__fmul
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix + 10)
	ld	a, (ix + 13)
	ld	hl, (ix + 22)
	ld	e, (ix + 25)
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	lea	bc, iy + 0
	ld	a, d
	call	__fadd
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix + 14)
	ld	a, (ix + 17)
	ld	hl, (ix + 26)
	ld	e, (ix + 29)
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	lea	bc, iy + 0
	ld	a, d
	call	__fadd
	push	bc
	pop	hl
	ld	e, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_vecNormalise
_vecNormalise:
	ld	hl, -5
	call	__frameset
	ld	de, (ix + 6)
	ld	hl, 12
	push	hl
	pea	ix + 9
	push	de
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix + 9)
	ld	a, (ix + 12)
	ld	(ix + -1), a
	push	bc
	pop	hl
	ld	e, a
	call	__fmul
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix + 13)
	ld	a, (ix + 16)
	push	bc
	pop	hl
	ld	(ix + -5), hl
	ld	e, a
	ld	(ix + -2), e
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	lea	bc, iy + 0
	ld	a, d
	call	__fadd
	push	bc
	pop	iy
	ld	d, a
	ld	bc, (ix + 17)
	ld	a, (ix + 20)
	push	bc
	pop	hl
	ld	e, a
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	lea	bc, iy + 0
	ld	a, d
	call	__fadd
	ld	l, a
	push	hl
	push	bc
	call	_invSqrt
	pop	bc
	pop	bc
	ld	bc, (ix + 9)
	ld	a, (ix + -1)
	call	__fmul
	ld	iy, (ix + 6)
	ld	(iy), bc
	ld	(iy + 3), a
	ld	bc, (ix + -5)
	ld	a, (ix + -2)
	call	__fmul
	ld	(iy + 4), bc
	ld	(iy + 7), a
	lea	hl, iy + 0
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_at
_at:
	ld	hl, -21
	call	__frameset
	lea	hl, ix + 9
	ld	(ix + -18), hl
	ld	e, (ix + 36)
	lea	bc, ix + -12
	ld	(ix + -15), bc
	ld	hl, 12
	push	bc
	push	bc
	push	bc
	push	bc
	push	bc
	push	bc
	ld	iy, 0
	add	iy, sp
	ld	(iy + 15), de
	ld	de, (ix + 33)
	ld	(iy + 12), de
	lea	de, iy + 0
	push	hl
	ld	iy, (ix + -18)
	pea	iy + 12
	push	de
	pop	iy
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -15)
	push	hl
	call	_vecScalarMul
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, -24
	add	hl, sp
	ld	sp, hl
	ld	iy, 0
	add	iy, sp
	ld	(ix + -21), iy
	ld	hl, 12
	push	hl
	ld	hl, (ix + -18)
	push	hl
	pea	iy + 15
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 12
	push	hl
	ld	hl, (ix + -15)
	push	hl
	ld	iy, (ix + -21)
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_vecAdd
	ld	hl, 27
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_rayColor
_rayColor:
	ld	hl, -72
	call	__frameset
	ld	hl, 24
	lea	bc, ix + -24
	ld	(ix + -69), bc
	lea	de, ix + -48
	ld	(ix + -63), de
	lea	de, ix + -60
	ld	(ix + -66), de
	push	hl
	pea	ix + 9
	push	bc
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	de, 12
	push	hl
	push	hl
	push	hl
	push	hl
	ld	hl, 0
	add	hl, sp
	push	de
	ld	iy, (ix + -69)
	pea	iy + 12
	push	hl
	pop	iy
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	pea	ix + -36
	call	_vecNormalise
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix + -32)
	ld	a, (ix + -29)
	ld	hl, -8388608
	ld	e, 63
	call	__fadd
	or	a, a
	sbc	hl, hl
	call	__fmul
	push	bc
	pop	hl
	ld	(ix + -69), hl
	ld	e, a
	ld	(ix + -72), de
	ld	bc, -8388608
	ld	a, 63
	call	__fsub
	ld	l, a
	push	de
	push	de
	push	de
	push	de
	push	de
	push	de
	ld	iy, 0
	add	iy, sp
	ld	(iy + 15), hl
	ld	(iy + 12), bc
	ld	hl, 12
	push	hl
	ld	hl, L___const.rayColor.col
	push	hl
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -63)
	push	hl
	call	_vecScalarMul
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	hl, (ix + -72)
	ld	(iy + 15), hl
	ld	hl, (ix + -69)
	ld	(iy + 12), hl
	ld	hl, 12
	push	hl
	ld	hl, L___const.rayColor.col_
	push	hl
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -66)
	push	hl
	call	_vecScalarMul
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, -24
	add	hl, sp
	ld	sp, hl
	ld	iy, 0
	add	iy, sp
	ld	(ix + -69), iy
	ld	hl, 12
	push	hl
	ld	hl, (ix + -66)
	push	hl
	pea	iy + 15
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 12
	push	hl
	ld	hl, (ix + -63)
	push	hl
	ld	iy, (ix + -69)
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_vecAdd
	ld	hl, 27
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -166
	call	__frameset
	or	a, a
	sbc	hl, hl
	ld	a, 64
	ld	c, 0
	lea	de, ix + -18
	ld	(ix + -117), de
	lea	de, ix + -30
	ld	(ix + -120), de
	ld	(ix + -18), hl
	ld	(ix + -15), a
	ld	(ix + -14), hl
	ld	(ix + -11), c
	ld	(ix + -10), hl
	ld	(ix + -7), c
	ld	(ix + -30), hl
	ld	(ix + -27), c
	ld	(ix + -26), hl
	ld	(ix + -23), a
	ld	(ix + -22), hl
	ex	de, hl
	ld	(ix + -19), c
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	hl, 64
	ld	(iy + 15), hl
	ld	(iy + 12), de
	ld	hl, 12
	push	hl
	ld	hl, (ix + -117)
	push	hl
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	pea	ix + -42
	call	_vecScalarDiv
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	ld	hl, 64
	ld	(iy + 15), hl
	or	a, a
	sbc	hl, hl
	ld	(iy + 12), hl
	ld	hl, 12
	push	hl
	ld	hl, (ix + -120)
	push	hl
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	pea	ix + -54
	call	_vecScalarDiv
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	bc, (ix + -54)
	ld	a, (ix + -51)
	ld	hl, (ix + -50)
	ld	de, -142
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	l, (ix + -47)
	push	ix
	ld	de, -139
	add	ix, de
	ld	(ix + 0), l
	pop	ix
	ld	hl, (ix + -46)
	ld	(ix + -126), hl
	ld	l, (ix + -43)
	ld	(ix + -123), l
	ld	hl, (ix + -42)
	ld	e, (ix + -39)
	ld	iy, (ix + -38)
	ld	(ix + -3), bc
	push	ix
	ld	bc, -148
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	ld	d, (ix + -35)
	ld	bc, -145
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), d
	ld	iy, (ix + -34)
	push	ix
	ld	bc, -132
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	ld	d, (ix + -31)
	ld	bc, -129
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), d
	ld	bc, (ix + -3)
	call	__fadd
	ld	(ix + -3), de
	push	ix
	ld	de, -135
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	push	ix
	ld	de, -142
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	ld	de, -139
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	push	ix
	ld	de, -148
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	ld	(ix + -3), bc
	push	ix
	ld	bc, -145
	add	ix, bc
	ld	e, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
	call	__fadd
	ld	(ix + -3), de
	push	ix
	ld	de, -139
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	push	ix
	ld	de, -142
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	ld	bc, (ix + -126)
	ld	a, (ix + -123)
	push	ix
	ld	de, -132
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	ld	(ix + -3), bc
	push	ix
	ld	bc, -129
	add	ix, bc
	ld	e, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
	call	__fadd
	push	bc
	pop	iy
	ld	d, a
	ld	(ix + -3), de
	push	ix
	ld	de, -135
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	or	a, a
	sbc	hl, hl
	ld	de, (ix + -3)
	ld	e, 0
	call	__fadd
	ld	(ix + -3), de
	push	ix
	ld	de, -129
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	push	ix
	ld	de, -132
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	push	ix
	ld	de, -139
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	ld	de, -142
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	ld	e, 0
	call	__fadd
	ld	(ix + -123), bc
	ld	(ix + -126), a
	lea	bc, iy + 0
	ld	a, d
	ld	hl, -8388608
	ld	e, 63
	call	__fadd
	push	bc
	pop	iy
	ld	d, a
	ld	bc, 0
	xor	a, a
	ld	(ix + -3), bc
	push	ix
	ld	bc, -129
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	push	ix
	ld	bc, -132
	add	ix, bc
	ld	e, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
	call	__fsub
	ld	(ix + -3), de
	push	ix
	ld	de, -129
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	push	ix
	ld	de, -132
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	ld	bc, 0
	xor	a, a
	ld	hl, (ix + -123)
	ld	de, (ix + -3)
	ld	e, (ix + -126)
	call	__fsub
	ld	(ix + -3), de
	push	ix
	ld	de, -135
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	ld	bc, 0
	xor	a, a
	lea	hl, iy + 0
	ld	de, (ix + -3)
	ld	e, d
	call	__fsub
	ld	(ix + -3), de
	ld	de, -139
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), bc
	ld	de, (ix + -3)
	ld	de, 100
	ld	(ix + -3), bc
	push	ix
	ld	bc, -142
	add	ix, bc
	ld	(ix + 0), a
	pop	ix
	ld	bc, (ix + -3)
BB10_1:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB10_2
	push	de
	pop	hl
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	(ix + -126), de
	push	de
	pop	bc
	ld	a, l
	call	__ltof
	ld	hl, -3801088
	ld	e, 66
	call	__fdiv
	ld	(ix + -3), de
	ld	de, -145
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), bc
	ld	l, a
	push	ix
	ld	de, -148
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	bc, 0
	ld	de, (ix + -3)
BB10_4:
	push	bc
	pop	hl
	ld	de, 100
	or	a, a
	sbc	hl, de
	jq	z, BB10_5
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	(ix + -123), bc
	ld	bc, (ix + -123)
	ld	a, l
	call	__ltof
	ld	hl, -3801088
	ld	e, 66
	call	__fdiv
	ld	l, a
	ld	de, 0
	ld	(ix + -78), de
	xor	a, a
	ld	(ix + -75), a
	ld	(ix + -74), de
	ld	(ix + -71), a
	ld	(ix + -70), de
	ld	(ix + -67), a
	push	de
	push	de
	push	de
	push	de
	push	de
	push	de
	ld	iy, 0
	add	iy, sp
	ld	(iy + 15), hl
	ld	(iy + 12), bc
	ld	hl, 12
	push	hl
	ld	hl, (ix + -117)
	push	hl
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	pea	ix + -90
	call	_vecScalarMul
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix + -90)
	ld	e, (ix + -87)
	ld	iy, (ix + -86)
	ld	d, (ix + -83)
	ld	bc, (ix + -82)
	ld	(ix + -3), de
	push	ix
	ld	de, -154
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	ld	a, (ix + -79)
	push	ix
	ld	de, -151
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	push	ix
	ld	de, -129
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	ld	de, -132
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	call	__fadd
	ld	(ix + -3), de
	push	ix
	ld	de, -161
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	push	ix
	ld	de, -135
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	lea	hl, iy + 0
	ld	de, (ix + -3)
	ld	e, d
	call	__fadd
	ld	(ix + -3), de
	ld	de, -157
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), bc
	push	ix
	dec	de
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	push	ix
	ld	de, -139
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	ld	de, -142
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	push	ix
	ld	de, -154
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	ld	(ix + -3), bc
	push	ix
	ld	bc, -151
	add	ix, bc
	ld	e, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
	call	__fadd
	ld	(ix + -3), de
	push	ix
	ld	de, -151
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	push	ix
	ld	de, -154
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	ld	iy, 0
	add	iy, sp
	push	ix
	ld	de, -148
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	(iy + 15), hl
	ld	de, -145
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 12), hl
	ld	hl, 12
	push	hl
	ld	hl, (ix + -120)
	push	hl
	pea	iy + 3
	ld	de, (ix + -3)
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	pea	ix + -102
	call	_vecScalarMul
	ld	hl, 21
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix + -102)
	ld	e, (ix + -99)
	ld	iy, (ix + -98)
	ld	d, (ix + -95)
	ld	bc, (ix + -94)
	ld	(ix + -3), de
	push	ix
	ld	de, -166
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	ld	a, (ix + -91)
	push	ix
	ld	de, -163
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	push	ix
	ld	de, -161
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	call	__fadd
	ld	(ix + -3), de
	push	ix
	ld	de, -161
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	push	ix
	ld	de, -157
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	dec	de
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	lea	hl, iy + 0
	ld	de, (ix + -3)
	ld	e, d
	call	__fadd
	push	bc
	pop	iy
	ld	d, a
	ld	(ix + -3), de
	push	ix
	ld	de, -151
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	push	ix
	ld	de, -154
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	push	ix
	ld	de, -166
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	ld	(ix + -3), bc
	push	ix
	ld	bc, -163
	add	ix, bc
	ld	e, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
	call	__fadd
	ld	(ix + -3), bc
	push	ix
	ld	bc, -161
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	ld	(ix + -66), hl
	dec	bc
	lea	hl, ix + 0
	add	hl, bc
	ld	l, (hl)
	ld	(ix + -63), l
	ld	(ix + -62), iy
	ld	(ix + -59), d
	ld	bc, (ix + -3)
	ld	(ix + -58), bc
	ld	(ix + -55), a
	ld	hl, -24
	add	hl, sp
	ld	sp, hl
	ld	iy, 0
	add	iy, sp
	ld	hl, 24
	push	hl
	pea	ix + -78
	pea	iy + 3
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	pea	ix + -114
	call	_rayColor
	ld	bc, (ix + -123)
	ld	hl, 27
	add	hl, sp
	ld	sp, hl
	inc	bc
	jq	BB10_4
BB10_5:
	ld	de, (ix + -126)
	dec	de
	jq	BB10_1
BB10_2:
BB10_7:
	call	_os_GetCSC
	or	a, a
	jq	z, BB10_7
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	private	L___const.rayColor.col
L___const.rayColor.col:
	dd	0x437f0000
	dd	0x437f0000
	dd	0x437f0000

	section	.rodata,"a",@progbits
	private	L___const.rayColor.col_
L___const.rayColor.col_:
	dd	0x43000000
	dd	0x43330000
	dd	0x437f0000

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	__Unwind_SjLj_Unregister
	extern	__fdiv
	extern	__fadd
	extern	__lsub
	extern	__ltof
	extern	_os_GetCSC
	extern	__frameset0
	extern	__lshrs
	extern	_memcpy
	extern	__fsub
	extern	__fmul
